# #+BEGIN_SRC sql :engine postgresql :dbpassword test1 :database dbgeo1 :results drawer :exports code
# #+BEGIN_SRC sql :engine postgresql :dbpassword test1 :dbuser user :database dbgeo1 :exports code :results silent

* Detailed Spec                                                     :rfc:
  - Note taken on [2016-10-09 Du 19:06] \\
    This spec should be updated with the part that describes
    when the polygon should be split with just one line, and when
    it should be split with two lines.
    
    There's also some details that are pending related to rotation
    of the polygon in order to reduce the number of cases to be
    analyzed.

We have a polygon P (also known as big parcel) and the nearest road
R. We get the bounding box B for P and all our searches for cutting
points/lines will be confined to B. We get the points that are on the
boundary and on the bounding box at the same time, we call these
"extreme points" and denote them with E, and we label them with their
cardinal direction.

Goal: We want to cut a corner C (also called subdivision) from P that
contains the nearest-to-road point. The cut will be done using two
lines, one horizontal (the green-line) and one vertical (the
red-line). We want C to be of a given area A.

Now get the closest two points on E to R, and depending on them, we
decide which corner to cut.

We'll use sweeping-lines for this. Any sweeping-lines mentioned will
be moving away from the corner (in other words, away from the closest
road point).

In what follows, we assume the north-west corner needs to be cut.

We place an inset (a horizontal line) that will be located sqrt(A) to
the south (relative to the north edge). The inset is positioned there
because we anticipate the target area to have a rectangular shape.

If the area above the inset (the one we aim for) is larger than our
target, we split the polygon, take the upper half and use another
sweeping (the red-line) line that goes from west to east, to find
another cutting line that allows us to get to target area.

If the area above the inset is insufficient (below the target area), we
search for a better position for it, using binary search, along the
north-south direction.

Additional details: The way the cut search works, using the inset, is
such that we avoid getting thin horizontal strips when our initial
polygon is a square/rectangle (and it is expected to be a square in
the vast majority of cases).

Details about corner cases (other than NW which was covered above):
- NE corner: green-line goes north->south and red-line goes east->west
- SE corner: green-line goes south->north and red-line goes east->west
- SW corner: green-line goes south->north and red-line goes west->east

So the green and red-lines always move away from the corner.
* Query to get test parcels                                        :for_test:

#+BEGIN_SRC sql -n :engine postgresql :exports code :cmdline "-A -t -w -h localhost -d dbgeo1 -U user" :cache no
SELECT
name, way
FROM planet_osm_polygon
WHERE tags->'leisure'='park'
AND name LIKE '%Herﾄピtrﾄブ%'
ORDER BY ST_Area(way) DESC
LIMIT 1;
#+END_SRC

#+RESULTS:
| Parcul Herﾄピtrﾄブ ||
||

* Get roads near parcels (using KNN)                               :for_test:

#+BEGIN_SRC sql -n :engine postgresql :exports code :cmdline "-A -w -h localhost -d dbgeo1 -U user" :cache no
WITH
parcels AS (
    SELECT
    osm_id, name, way
    FROM planet_osm_polygon
    WHERE
    tags->'leisure'='park'
    AND name LIKE '%Herﾄピtrﾄブ%'
    LIMIT 3
), roads AS (
    SELECT
    osm_id, name, way
    FROM planet_osm_line
    WHERE tags->highway = 'motorway'
)
-- do KNN cross-join between parcels and roads
-- to get nearby roads (rn)
SELECT
DISTINCT ON (rn.osm_id)
rn.osm_id, rn.name, p.osm_id, p.name, dr
FROM parcels p
CROSS JOIN LATERAL (
    SELECT
    *,
    -- distance to road
    ST_Distance(p.way,r.way) as dr
    FROM roads r
    ORDER BY p.way <-> r.way
    LIMIT 5
) rn;
#+END_SRC

#+RESULTS:
|    osm_id | name                             |   osm_id | name             |               dr |
|-----------+----------------------------------+----------+------------------+------------------|
| 256097200 | Autostrada A3 Bucureﾈ冲i - Braﾈ冩v | 88337012 | Parcul Herﾄピtrﾄブ | 3886.49711984996 |
| 284325578 | Autostrada A3 Bucureﾈ冲i - Braﾈ冩v | 91797290 | Parcul Herﾄピtrﾄブ | 5643.86537188825 |
| 284325581 | Autostrada A3 Bucureﾈ冲i - Braﾈ冩v | 88337012 | Parcul Herﾄピtrﾄブ | 4716.35617574639 |
| 284325583 | Autostrada A3 Bucureﾈ冲i - Braﾈ冩v | 91797290 | Parcul Herﾄピtrﾄブ | 4810.48244180351 |
| 284325584 | Autostrada A3 Bucureﾈ冲i - Braﾈ冩v | 88337012 | Parcul Herﾄピtrﾄブ | 4886.17496682222 |

* Implementation
** Visualization
- [X] Need to use [[http://postgis.net/docs/ST_GeometryType.html][ST_GeometryType]] to draw parcels and roads differently
- [X] Refactoring
- [ ] Round off coordinates to save space on the SVG.
** Core algorithm
- [X] Need to sort clock-wise to determine cardinal directions
      for boundary extremes and label them. This is needed so we know
      which corner to cut.
- [X] Need to look again at specs and write down with examples, when the red-line cut
      will be used.
- [X] Get green-line sweep trajectory
- [X] Find green-line
- [X] Use inset-based green-line and red-line search as described in the spec
- [X] Update the cut polygon and insert the corner in the DB
* Other
CREATE VIEW roads_by_type AS
SELECT *, tags->'highway' AS road_type
FROM planet_osm_line WHERE tags ? 'highway';
* Progress
  - Note taken on [2016-10-10 Lu 18:26] \\
    Refined spec and simplified some parts of the code.
  - Note taken on [2016-10-10 Lu 14:32] \\
    Need to detail how the red-line cut works and when it's being used.
  - Note taken on [2016-10-09 Du 17:52] \\
    I noticed that the first cut would solve the problem, meaning it's able
    to find the required line.
    
    After discussing with John, we agreed that a 2nd cut is actually required
    but only under certain conditions.

